<Type Name="_Inspector" FullName="Microsoft.Office.Interop.Outlook._Inspector">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c0c4b10538c5018a1ef11ef94f135148361dc521" />
    <Meta Name="ms.sourcegitcommit" Value="372abf58b21f4fab503d106f0e8c8a2ac45f9332" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="de-DE" />
    <Meta Name="ms.lasthandoff" Value="07/19/2018" />
    <Meta Name="ms.locfileid" Value="20636683" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface _Inspector" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract _Inspector" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Interop.Outlook._Inspector" />
  <TypeSignature Language="VB.NET" Value="Public Interface _Inspector" />
  <TypeSignature Language="C++ CLI" Value="public interface class _Inspector" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("00063005-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4160)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="35e97-101">Dies ist eine primäre Schnittstelle in einem COM-Co-Klasse, die von verwaltetem Code für die Interoperabilität mit den entsprechenden COM-Objekt erforderlich ist.</span>
      <span class="sxs-lookup">
        <span data-stu-id="35e97-101">This is a primary interface in a COM coclass that is required by managed code for interoperability with the corresponding COM object.</span>
      </span>
      <span data-ttu-id="35e97-102">Verwenden Sie diese primäre Schnittstelle nur, wenn die Methode, den, die Sie verwenden möchten, den gleichen Namen wie die COM-Objekt gemeinsam verwendet. In diesem Fall dieser Schnittstelle zum Aufrufen der Methode umgewandelt, und in die neuesten Ereignisschnittstelle für die Verbindung an das Ereignis umgewandelt.</span>
      <span class="sxs-lookup">
        <span data-stu-id="35e97-102">Use this primary interface only when the method you want to use shares the same name as an event of the COM object; in this case, cast to this interface to call the method, and cast to the latest events interface to connect to the event.</span>
      </span>
      <span data-ttu-id="35e97-103">Verwenden Sie andernfalls die .NET-Schnittstelle, die von der COM-Co-Klasse Zugriff auf Methoden, Eigenschaften und Ereignisse das COM-Objekt abgeleitet ist.</span>
      <span class="sxs-lookup">
        <span data-stu-id="35e97-103">Otherwise, use the .NET interface that is derived from the COM coclass to access methods, properties, and events of the COM object.</span>
      </span>
      <span data-ttu-id="35e97-104">Informationen über das COM-Objekt finden Sie unter <see cref="T:Microsoft.Office.Interop.Outlook.Inspector" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="35e97-104">For information about the COM object, see <see cref="T:Microsoft.Office.Interop.Outlook.Inspector" />.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public void Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Activate() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Outlook._Inspector.Activate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Activate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Activate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8467)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="35e97-105">Ein Inspektor-Fenster wird aktiviert, indem es im Vordergrund angezeigt wird und der Fokus für die Tastatureingabe festgelegt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-105">Activates an inspector window by bringing it to the foreground and setting keyboard focus.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Application">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Outlook.Application Application { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Outlook.Application Application" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._Inspector.Application" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Application As Application" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Outlook::Application ^ Application { Microsoft::Office::Interop::Outlook::Application ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(61440)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(61440)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Outlook.Application</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="35e97-106">Gibt ein <see cref="T:Microsoft.Office.Interop.Outlook.Application" /> -Objekt, das das übergeordnete Outlook-Anwendung für das Objekt darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-106">Returns an <see cref="T:Microsoft.Office.Interop.Outlook.Application" />  object that represents the parent Outlook application for the  object.</span>
          </span>
          <span data-ttu-id="35e97-107">Schreibgeschützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-107">Read-only.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachmentSelection">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Outlook.AttachmentSelection AttachmentSelection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Outlook.AttachmentSelection AttachmentSelection" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._Inspector.AttachmentSelection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AttachmentSelection As AttachmentSelection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Outlook::AttachmentSelection ^ AttachmentSelection { Microsoft::Office::Interop::Outlook::AttachmentSelection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(64632)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(64632)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Outlook.AttachmentSelection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="35e97-108">Ruft ein <see cref="T:Microsoft.Office.Interop.Outlook.AttachmentSelection" /> Objekt bestehend aus eine oder mehrere Anlagen, die im Inspektor ausgewählt sind.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-108">Obtains an <see cref="T:Microsoft.Office.Interop.Outlook.AttachmentSelection" /> object consisting of one or more attachments that are selected in the inspector.</span>
          </span>
          <span data-ttu-id="35e97-109">Schreibgeschützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-109">Read-only.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Caption">
      <MemberSignature Language="C#" Value="public string Caption { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Caption" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._Inspector.Caption" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Caption As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Caption { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8465)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(8465)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="35e97-110">Gibt eine <b>Zeichenfolge</b> (<b>String</b> in c#) zurück, der den Titel darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-110">Returns a <b>String</b> (<b>string</b> in C#) representing the title.</span>
          </span>
          <span data-ttu-id="35e97-111">Schreibgeschützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-111">Read-only.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Class">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Outlook.OlObjectClass Class { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Outlook.OlObjectClass Class" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._Inspector.Class" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Class As OlObjectClass" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Outlook::OlObjectClass Class { Microsoft::Office::Interop::Outlook::OlObjectClass get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(61450)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(61450)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Outlook.OlObjectClass</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="35e97-112">Gibt ein <see cref="T:Microsoft.Office.Interop.Outlook.OlObjectClass" /> Konstante, die die Klasse des Objekts angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-112">Returns an <see cref="T:Microsoft.Office.Interop.Outlook.OlObjectClass" /> constant indicating the object's class.</span>
          </span>
          <span data-ttu-id="35e97-113">Schreibgeschützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-113">Read-only.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close (Microsoft.Office.Interop.Outlook.OlInspectorClose SaveMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close([in]valuetype Microsoft.Office.Interop.Outlook.OlInspectorClose SaveMode) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Outlook._Inspector.Close(Microsoft.Office.Interop.Outlook.OlInspectorClose)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close (SaveMode As OlInspectorClose)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close(Microsoft::Office::Interop::Outlook::OlInspectorClose SaveMode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8451)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SaveMode" Type="Microsoft.Office.Interop.Outlook.OlInspectorClose" />
      </Parameters>
      <Docs>
        <param name="SaveMode">
          <span data-ttu-id="35e97-p106">Das Verhalten beim Schließen. Wenn sich das im Inspektor angezeigte Element nicht geändert hat, hat dieses Argument keine Wirkung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-p106">The close behavior. If the item displayed within the inspector has not been changed, this argument has no effect.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="35e97-116">Schließt die <see cref="T:Microsoft.Office.Interop.Outlook.Inspector" /> und speichert optional Änderungen am angezeigten Outlook-Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-116">Closes the  <see cref="T:Microsoft.Office.Interop.Outlook.Inspector" /> and optionally saves changes to the displayed Outlook item.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandBars">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Core.CommandBars CommandBars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Core.CommandBars CommandBars" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._Inspector.CommandBars" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CommandBars As CommandBars" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Core::CommandBars ^ CommandBars { Microsoft::Office::Core::CommandBars ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8448)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(8448)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Core.CommandBars</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="35e97-117">Dieses Objekt, dieses Mitglied oder diese Aufzählung ist veraltet und kann nicht in Ihrem Code verwendet werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-117">This object, member, or enumeration is deprecated and is not intended to be used in your code.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentItem">
      <MemberSignature Language="C#" Value="public object CurrentItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CurrentItem" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._Inspector.CurrentItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentItem As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CurrentItem { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8450)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(8450)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="35e97-118">Gibt ein <b>Objekt</b> zurück, das aktuelle Element im Inspektor angezeigt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-118">Returns an <b>Object</b> representing the current item being displayed in the inspector.</span>
          </span>
          <span data-ttu-id="35e97-119">Schreibgeschützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-119">Read-only.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>
          <span data-ttu-id="35e97-120">
            <para>Wenn kein Element aktuell geöffnet ist, wird eine Fehlermeldung zurückgegeben.</para>
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-120">
              <para>If no item is currently open, an error message will be returned.</para>
              <para />
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Display">
      <MemberSignature Language="C#" Value="public void Display (object Modal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Display([in]object Modal) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Outlook._Inspector.Display(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Display (Optional Modal As Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8452)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Modal" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Modal">
          <span data-ttu-id="35e97-p108">
            <b>True</b>, wenn das Fenster als modales Dialogfeld festzulegen. Der Standardwert ist <b>False</b>. </span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-p108">
              <b>True</b> to make the window modal. The default value is <b>False</b>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="35e97-123">Zeigt ein neues <see cref="T:Microsoft.Office.Interop.Outlook.Inspector" /> -Objekt für das Element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-123">Displays a new <see cref="T:Microsoft.Office.Interop.Outlook.Inspector" /> object for the item.</span>
          </span>
        </summary>
        <remarks>
          <span data-ttu-id="35e97-124">
            <para>Die <b>Display</b> -Methode wird für Explorer- und Inspektor-Fenster aus Gründen der Abwärtskompatibilität unterstützt. Um ein Explorer- oder Inspektor-Fenster aktivieren möchten, verwenden Sie die <see cref="M:Microsoft.Office.Interop.Outlook._Inspector.Activate" /> -Methode.</para>
            <para>, Wenn Sie versuchen, eine "unsichere" File System-Objekt (oder "Freedoc"-Datei) mithilfe von Microsoft Outlook-Objektmodell zu öffnen, erhalten Sie in den Programmiersprachen C oder C++ den Rückgabecode E_FAIL. In Outlook 2000 und früheren Versionen konnten Sie eine "unsichere" File System-Objekt mithilfe von die <b>Display</b> -Methode öffnen.</para>
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-124">
              <para>The <b>Display</b> method is supported for explorer and inspector windows for the sake of backward compatibility. To activate an explorer or inspector window, use the <see cref="M:Microsoft.Office.Interop.Outlook._Inspector.Activate" /> method.</para>
              <para>If you attempt to open an "unsafe" file system object (or "freedoc" file) by using the Microsoft Outlook object model, you receive the E_FAIL return code in the C or C++ programming languages. In Outlook 2000 and earlier, you could open an "unsafe" file system object by using the <b>Display</b> method.</para>
              <para />
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EditorType">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Outlook.OlEditorType EditorType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Outlook.OlEditorType EditorType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._Inspector.EditorType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EditorType As OlEditorType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Outlook::OlEditorType EditorType { Microsoft::Office::Interop::Outlook::OlEditorType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8464)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(8464)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Outlook.OlEditorType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="35e97-125">Gibt ein <see cref="T:Microsoft.Office.Interop.Outlook.OlEditorType" /> Konstante, die den Typ des Editors angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-125">Returns an <see cref="T:Microsoft.Office.Interop.Outlook.OlEditorType" /> constant indicating the type of editor.</span>
          </span>
          <span data-ttu-id="35e97-126">Schreibgeschützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-126">Read-only.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>
          <span data-ttu-id="35e97-127">
            <para>Seit Microsoft Office Outlook 2007 gibt die <b>EditorType</b> -Eigenschaft immer OlEditorWord zurück.</para>
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-127">
              <para>Since Microsoft Office Outlook 2007, the <b>EditorType</b> property always returns olEditorWord.</para>
              <para />
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public int Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Height" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._Inspector.Height" />
      <MemberSignature Language="VB.NET" Value="Public Property Height As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Height { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8468)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(8468)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(8468)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="35e97-128">Gibt, oder legt einen <b>ganze Zahl</b> (<b>Int</b> in c#)-Wert, der die Höhe (in Pixel) der Inspektor-Fenster angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-128">Returns or sets an <b>Integer</b> (<b>int</b> in C#) value specifying the height (in pixels) of the inspector window.</span>
          </span>
          <span data-ttu-id="35e97-129">Lese-/Schreibzugriff.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-129">Read/write.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HideFormPage">
      <MemberSignature Language="C#" Value="public void HideFormPage (string PageName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HideFormPage([in]string PageName) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Outlook._Inspector.HideFormPage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub HideFormPage (PageName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void HideFormPage(System::String ^ PageName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8456)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PageName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PageName">
          <span data-ttu-id="35e97-130">Der Anzeigename der Formularseite oder den internen Namen eines Formularbereichs ausgeblendet werden sollen.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-130">The display name of the form page, or the internal name of a form region to be hidden.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="35e97-131">Blendet einen Formularbereich im Inspektor oder Formularseite an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-131">Hides a form page or form region in the inspector.</span>
          </span>
        </summary>
        <remarks>
          <span data-ttu-id="35e97-132">
            <para>Sie können <b>HideFormRegion</b> verwenden, um das Ausblenden eines Formularbereichs durch Angeben der <see cref="P:Microsoft.Office.Interop.Outlook._FormRegion.InternalName" /> -Eigenschaft des Formularbereichs, wenn der Formularbereich ein angrenzender ist oder separater Formularbereich. Den Formularbereich kann nur das Add-in, in dem den Formularbereich implementiert ausblenden.</para>
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-132">
              <para>You can use <b>HideFormRegion</b> to hide a form region by specifying the <see cref="P:Microsoft.Office.Interop.Outlook._FormRegion.InternalName" /> property of the form region, if the form region is an adjoining or separate form region. Only the add-in that implements the form region can hide the form region.</para>
              <para />
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HTMLEditor">
      <MemberSignature Language="C#" Value="public object HTMLEditor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object HTMLEditor" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._Inspector.HTMLEditor" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HTMLEditor As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ HTMLEditor { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8462)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(8462)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.TypeLibFunc(64)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="35e97-133">Dieses Objekt, dieses Mitglied oder diese Aufzählung ist veraltet und kann nicht in Ihrem Code verwendet werden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-133">This object, member, or enumeration is deprecated and is not intended to be used in your code.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWordMail">
      <MemberSignature Language="C#" Value="public bool IsWordMail ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsWordMail() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Outlook._Inspector.IsWordMail" />
      <MemberSignature Language="VB.NET" Value="Public Function IsWordMail () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsWordMail();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8453)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="35e97-134">Bestimmt, ob die einem Inspektor zugeordnete e-Mail-Nachricht in Outlook angezeigte <see cref="T:Microsoft.Office.Interop.Outlook.Inspector" /> oder in Microsoft Word.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-134">Determines whether the mail message associated with an inspector is displayed in an Outlook <see cref="T:Microsoft.Office.Interop.Outlook.Inspector" />  or in Microsoft Word.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="35e97-135">
            <b>True,</b> Wenn die e-Mail-Nachricht, in Microsoft angezeigt wird Word (d. h., wenn Word Mail verwendet wird); anderenfalls <b>False</b>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-135">
              <b>True</b> if the mail message is displayed in Microsoft Word (that is, if Word Mail is in use); otherwise, <b>False</b>.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public int Left { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Left" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._Inspector.Left" />
      <MemberSignature Language="VB.NET" Value="Public Property Left As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Left { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8469)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(8469)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(8469)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="35e97-136">Zurückgeben oder Festlegen der einen <b>ganze Zahl</b> (<b>Int</b> in c#)-Wert, der die Position (in Pixel) des linken Rands des ein Inspektor-Fenster vom Rand des Bildschirms vertikale angeben.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-136">Returns or sets an <b>Integer</b> (<b>int</b> in C#) value specifying the position (in pixels) of the left vertical edge of an inspector window from the edge of the screen.</span>
          </span>
          <span data-ttu-id="35e97-137">Lese-/Schreibzugriff.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-137">Read/write.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModifiedFormPages">
      <MemberSignature Language="C#" Value="public object ModifiedFormPages { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ModifiedFormPages" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._Inspector.ModifiedFormPages" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ModifiedFormPages As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ModifiedFormPages { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8454)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(8454)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="35e97-138">Gibt die <see cref="T:Microsoft.Office.Interop.Outlook.Pages" /> -Auflistung, die alle Seiten für das Element im Inspektor darstellt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-138">Returns the <see cref="T:Microsoft.Office.Interop.Outlook.Pages" />  collection that represents all the pages for the item in the inspector.</span>
          </span>
          <span data-ttu-id="35e97-139">Schreibgeschützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-139">Read-only.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>
          <span data-ttu-id="35e97-140">
            <para>Die Hauptseite und bis zu fünf benutzerdefinierte Seiten können erhalten werden mithilfe der <see cref="M:Microsoft.Office.Interop.Outlook.Pages.Add(System.Object)" /> Methode.</para>
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-140">
              <para>The main page and up to five customizable pages can be obtained using the <see cref="M:Microsoft.Office.Interop.Outlook.Pages.Add(System.Object)" />  method. </para>
              <para />
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewFormRegion">
      <MemberSignature Language="C#" Value="public object NewFormRegion ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object NewFormRegion() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Outlook._Inspector.NewFormRegion" />
      <MemberSignature Language="VB.NET" Value="Public Function NewFormRegion () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ NewFormRegion();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(64493)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="35e97-141">Öffnet im Inspektor für einen neuen Formularbereich eine neue Seite im Entwurfsmodus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-141">Opens a new page in design mode in the inspector for a new form region.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="35e97-142">Ein Objekt, das die Seite darstellt, auf der der Formularbereich im Inspektor angezeigt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-142">An Object that represents the page displaying the form region in the inspector.</span>
          </span>
        </returns>
        <remarks>
          <span data-ttu-id="35e97-143">
            <para>Wenn sich der Inspektor noch nicht in Entwurfsmodus befindet, <b>NewFormRegion</b> wird versetzt es im Entwurfsmodus.</para>
            <para>Diese Methode wird nur für einen neuen Formularbereich eine Seite im Entwurfsmodus geöffnet. Diese Methode dient nicht zum Erstellen eines Formularbereichs zur Laufzeit.</para>
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-143">
              <para>If the inspector is not already in design mode, <b>NewFormRegion</b> will put it in design mode.</para>
              <para>This method only opens a page for a new form region in design mode. This method is not intended for creating a form region at runtime.</para>
              <para />
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenFormRegion">
      <MemberSignature Language="C#" Value="public object OpenFormRegion (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object OpenFormRegion([in]string Path) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Outlook._Inspector.OpenFormRegion(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenFormRegion (Path As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ OpenFormRegion(System::String ^ Path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(64511)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="35e97-144">Ein vollständiger lokaler Pfad zur OFS-Datei (Outlook Form Storage) für den Formularbereich, der im Inspektor geöffnet werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-144">A full local file path to the Outlook Form Storage (.OFS) file for the form region that is to be opened in the inspector.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="35e97-145">Öffnet im Inspektor für den angegebenen Formularbereich eine Seite im Entwurfsmodus.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-145">Opens a page in design mode in the inspector for the specified form region.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="35e97-146">Ein Objekt, das die Seite darstellt, auf der der Formularbereich im Inspektor angezeigt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-146">An Object that represents the page displaying the form region in the inspector.</span>
          </span>
        </returns>
        <remarks>
          <span data-ttu-id="35e97-147">
            <para>Wenn der Inspektor noch nicht in Entwurfsmodus befindet, wird <b>OpenFormRegion</b> in den Entwurfsmodus versetzt.</para>
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-147">
              <para>If the inspector is not already in design mode, <b>OpenFormRegion</b> will put it in design mode.</para>
              <para />
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public object Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Parent" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._Inspector.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Parent { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(61441)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(61441)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="35e97-p113">Gibt das übergeordnete <b>Objekt</b> des angegebenen Objekts zurück. Schreibgeschützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-p113">Returns the parent <b>Object</b> of the specified object. Read-only.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveFormRegion">
      <MemberSignature Language="C#" Value="public void SaveFormRegion (object Page, string FileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SaveFormRegion([in]object Page, [in]string FileName) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Outlook._Inspector.SaveFormRegion(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SaveFormRegion (Page As Object, FileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SaveFormRegion(System::Object ^ Page, System::String ^ FileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(64512)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Page" Type="System.Object" />
        <Parameter Name="FileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Page">
          <span data-ttu-id="35e97-150">Die Seite, auf der der Formularbereich im Inspektor angezeigt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-150">The page displaying the form region in the inspector.</span>
          </span>
        </param>
        <param name="FileName">
          <span data-ttu-id="35e97-151">Der vollständige lokale Pfad zu einer OFS-Datei (Outlook Form Storage), unter der der Formularbereich gespeichert wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-151">The full local file path to an Outlook Form Storage (.OFS) file that the form region is being saved to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="35e97-152">Speichert im Inspektor die Seite im Entwurfsmodus unter der angegebenen Datei.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-152">Saves the specified page in design mode in the inspector to the specified file.</span>
          </span>
        </summary>
        <remarks>
          <span data-ttu-id="35e97-153">
            <para>In der Reihenfolge <b>SaveFormRegion</b> zum Speichern des Formularbereichs muss der Formularbereich im Entwurfsmodus im Inspektor geladen wurden.</para>
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-153">
              <para>In order for <b>SaveFormRegion</b> to save the form region, the form region must have been loaded in design mode in the inspector.</para>
              <para />
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Session">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Outlook.NameSpace Session { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Office.Interop.Outlook.NameSpace Session" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._Inspector.Session" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Session As NameSpace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Outlook::NameSpace ^ Session { Microsoft::Office::Interop::Outlook::NameSpace ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(61451)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(61451)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Outlook.NameSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="35e97-154">Gibt die <see cref="T:Microsoft.Office.Interop.Outlook.NameSpace" /> -Objekt für die aktuelle Sitzung.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-154">Returns the <see cref="T:Microsoft.Office.Interop.Outlook.NameSpace" />  object for the current session.</span>
          </span>
          <span data-ttu-id="35e97-155">Schreibgeschützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-155">Read-only.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>
          <span data-ttu-id="35e97-156">
            <para>Die <b>Session</b> -Eigenschaft und die <see cref="M:Microsoft.Office.Interop.Outlook._Application.GetNamespace(System.String)" /> -Methode kann austauschbar verwendet werden, um das <b>NameSpace</b> -Objekt für die aktuelle Sitzung abzurufen. Beide Member haben denselben Zweck. Führen Sie die folgenden Paare von Anweisungen beispielsweise die gleiche Funktion:</para>
            <code>Dim objNamespace As Outlook.NameSpace = _
    Application.GetNamespace("MAPI")</code>
            <code>Dim objSession As Outlook.NameSpace = Application.Session</code>
            <code>Outlook.NameSpace objNamespace = 
    Application.GetNamespace("MAPI");</code>
            <code>Outlook.NameSpace objSession = Application.Session;</code>
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-156">
              <para>The <b>Session</b> property and the <see cref="M:Microsoft.Office.Interop.Outlook._Application.GetNamespace(System.String)" /> method can be used interchangeably to obtain the <b>NameSpace</b> object for the current session. Both members serve the same purpose. For example, the following pairs of statements perform the same function:</para>
              <code>Dim objNamespace As Outlook.NameSpace = _
    Application.GetNamespace("MAPI")</code>
              <code>Dim objSession As Outlook.NameSpace = Application.Session</code>
              <code>Outlook.NameSpace objNamespace = 
    Application.GetNamespace("MAPI");</code>
              <code>Outlook.NameSpace objSession = Application.Session;</code>
              <para />
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetControlItemProperty">
      <MemberSignature Language="C#" Value="public void SetControlItemProperty (object Control, string PropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetControlItemProperty([in]object Control, [in]string PropertyName) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Outlook._Inspector.SetControlItemProperty(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetControlItemProperty (Control As Object, PropertyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetControlItemProperty(System::Object ^ Control, System::String ^ PropertyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(64201)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Control" Type="System.Object" />
        <Parameter Name="PropertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Control">
          <span data-ttu-id="35e97-157">Das Steuerelement, das an eine Eigenschaft gebunden wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-157">The control that will be bound to a property.</span>
          </span>
        </param>
        <param name="PropertyName">
          <span data-ttu-id="35e97-158">Der Name der Eigenschaft, die an das Steuerelement gebunden wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-158">The name of the property that will be bound to the control.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="35e97-159">Eine integrierte Eigenschaft oder benutzerdefinierte Eigenschaft an ein Steuerelement in einem Inspektor gebunden.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-159">Binds a built-in property or custom property to a control in an inspector.</span>
          </span>
        </summary>
        <remarks>
          <span data-ttu-id="35e97-160">
            <para>Mit dieser Methode können Sie eine explizite integrierte Eigenschaft oder eine benutzerdefinierte Eigenschaft an ein Steuerelement gebunden werden. Sie müssen auf die Eigenschaft verweisen von Zeichenfolgennamens, beispielsweise <b>Betreff</b>, und nicht von Namespace, z. B. http://schemas.microsoft.com/mapi/proptag/0x0037001E.</para>
            <para>Der <paramref name="PropertyName" /> Parameter ist nicht Groß-/Kleinschreibung beachtet. Beispielsweise <b>SetControlItemProperty</b> interpretiert Argument <b>CustomerId</b><b>CustomerID</b> identisch sein und bindet das angegebene Steuerelement an die integrierte <see cref="P:Microsoft.Office.Interop.Outlook._ContactItem.CustomerID" /> -Eigenschaft.</para> Sie können auch die folgende Codezeile Code MyPage.Controls("bar"). verwenden 
          <para>. ItemProperty = "subject", um die Subject-Eigenschaft auf ein Steuerelement zu binden. Beachten Sie jedoch, dass nicht vertrauenswürdigem Code mit dies einen Sicherheitshinweis löst, wenn die Eigenschaft durch den Objektmodellschutz Sicherheit wie <b>auf</b>geschützt ist, und der Clientcomputer, Microsoft Office Outlook 2007 oder höher jedoch ausgeführt wird nicht vorhanden ist ein entsprechend Antivirensoftware eingerichtet. <b>SetControlItemProperty</b> -Methode können Sie um Sicherheitswarnungen mit vertrauenswürdigen Anwendungen zu vermeiden.  Weitere Informationen finden Sie unter <a href="http://go.microsoft.com/fwlink/?LinkId=87941">Sicherheitsverhalten des Outlook-Objektmodell</a></para><para /></span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-160">
              <para>You can use this method to bind an explicit built-in property or a custom property to a control. You must reference the property by its string name, for example, <b>Subject</b>, and not by namespace, for example, http://schemas.microsoft.com/mapi/proptag/0x0037001E.</para>
              <para>The <paramref name="PropertyName" /> parameter is not case-sensitive. For example, <b>SetControlItemProperty</b> interprets an argument, <b>CustomerId</b>, to be the same as <b>CustomerID</b> and binds the specified control to the built-in <see cref="P:Microsoft.Office.Interop.Outlook._ContactItem.CustomerID" /> property.</para>
              <para>You can also use the following line of code myPage.Controls("bar").ItemProperty = "subject"  to bind the subject property to a control. However, note that untrusted code using this will trigger a security warning if the property is protected by the object model security guard such as <b>To</b>, and the client computer is running Microsoft Office Outlook 2007 or later but does not have an appropriately set up antivirus software. You can use the <b>SetControlItemProperty</b> method to avoid security warnings with trusted applications.  For more information, see <a href="http://go.microsoft.com/fwlink/?LinkId=87941">Security Behavior of the Outlook Object Model</a></para>
              <para />
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCurrentFormPage">
      <MemberSignature Language="C#" Value="public void SetCurrentFormPage (string PageName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCurrentFormPage([in]string PageName) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Outlook._Inspector.SetCurrentFormPage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetCurrentFormPage (PageName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetCurrentFormPage(System::String ^ PageName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8460)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PageName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PageName">
          <span data-ttu-id="35e97-161">Der Anzeigename der Formularseite oder den internen Namen des Formularbereichs.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-161">The display name of the form page, or the internal name of the form region.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="35e97-162">Zeigt den Formularbereich oder die angegebene Formularseite im Inspektor an.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-162">Displays the specified form page or form region in the inspector.</span>
          </span>
        </summary>
        <remarks>
          <span data-ttu-id="35e97-163">
            <para>Sie können <b>SetCurrentFormPage</b> verwenden, um die Anzeige eines Formularbereichs durch Angeben der <see cref="P:Microsoft.Office.Interop.Outlook._FormRegion.InternalName" /> -Eigenschaft des Formularbereichs, wenn der Formularbereich befindet ein eine Separate, ersetzen oder alle ersetzen Formularbereich.</para>
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-163">
              <para>You can use <b>SetCurrentFormPage</b> to display a form region by specifying the <see cref="P:Microsoft.Office.Interop.Outlook._FormRegion.InternalName" /> property of the form region, if the form region is an a separate, replace, or replace-all form region.</para>
              <para />
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSchedulingStartTime">
      <MemberSignature Language="C#" Value="public void SetSchedulingStartTime (DateTime Start);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetSchedulingStartTime([in]valuetype System.DateTime Start) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Outlook._Inspector.SetSchedulingStartTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSchedulingStartTime (Start As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSchedulingStartTime(DateTime Start);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(64647)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Start">
          <span data-ttu-id="35e97-164">Der Anfang des Zeitraums, der auf der Registerkarte Terminplanungs-Assistent des Inspektors für Frei-/Gebucht-Zeiten für Besprechungsteilnehmer angezeigt wird.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-164">The beginning of the time range that the Scheduling Assistant tab of the inspector displays free/busy times for meeting attendees.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="35e97-165">Legt den Beginn für ein Besprechungselement im Frei-/Gebucht-Raster auf der Registerkarte Terminplanungs-Assistent des Inspektors fest.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-165">Sets the start time for a meeting item in the free/busy grid on the Scheduling Assistant tab of the inspector.</span>
          </span>
        </summary>
        <remarks>
          <span data-ttu-id="35e97-166">
            <para>Das vom angegebenen Objekt der <see cref="P:Microsoft.Office.Interop.Outlook._Inspector.CurrentItem" /> -Eigenschaft des übergeordneten <see cref="T:Microsoft.Office.Interop.Outlook.Inspector" /> Objekt muss ein <see cref="T:Microsoft.Office.Interop.Outlook.AppointmentItem" /> oder <see cref="T:Microsoft.Office.Interop.Outlook.MeetingItem" />. Die Registerkarte Terminplanungs muss im Inspektor angezeigt werden, andernfalls löst einen Fehler aus Microsoft Outlook. Wenn Outlook auf die Registerkarte Terminplanungs für den Elementtyp angezeigt werden kann, wird Outlook die folgende Fehlermeldung angezeigt: die scheduling Startzeit kann nur festgelegt werden, wenn die Terminplanungs auf ein Besprechungselement angezeigt wird.</para>
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-166">
              <para>The object specified by the <see cref="P:Microsoft.Office.Interop.Outlook._Inspector.CurrentItem" /> property of the parent <see cref="T:Microsoft.Office.Interop.Outlook.Inspector" /> object must be an <see cref="T:Microsoft.Office.Interop.Outlook.AppointmentItem" /> or <see cref="T:Microsoft.Office.Interop.Outlook.MeetingItem" />. The Scheduling Assistant tab must be displayed in the inspector, otherwise Microsoft Outlook raises an error. If Outlook cannot display the Scheduling Assistant tab for that item type, Outlook displays the following error: The scheduling start time can only be set when the Scheduling Assistant is displayed on a meeting item.</para>
              <para />
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowFormPage">
      <MemberSignature Language="C#" Value="public void ShowFormPage (string PageName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowFormPage([in]string PageName) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Interop.Outlook._Inspector.ShowFormPage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShowFormPage (PageName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShowFormPage(System::String ^ PageName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8457)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PageName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PageName">
          <span data-ttu-id="35e97-167">Der Anzeigename der Formularseite oder den internen Namen eines Formularbereichs angezeigt werden soll.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-167">The display name of the form page, or the internal name of a form region to be shown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="35e97-168">Zeigt eine Schaltfläche in der Gruppe Anzeigen der Microsoft Office Fluent-Menüband für den Inspektor, auf dem die Seite oder den Formularbereich vom angegebenen anzeigen wird <paramref name="PageName" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-168">Displays a button in the Show group of the Microsoft Office Fluent ribbon for the inspector, clicking which will show the page or form region specified by <paramref name="PageName" />.</span>
          </span>
        </summary>
        <remarks>
          <span data-ttu-id="35e97-169">
            <para>Für Formularbereiche können <b>ShowFormPage</b> zum Anzeigen der Schaltfläche durch Angabe der <see cref="P:Microsoft.Office.Interop.Outlook._FormRegion.InternalName" /> -Eigenschaft des Formularbereichs, wenn der Formularbereich ein angrenzender ist oder separater Formularbereich. <b>ShowFormRegion</b> können nur das Add-in, in dem den Formularbereich implementiert die Schaltfläche angezeigt.</para>
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-169">
              <para>For form regions, you can use <b>ShowFormPage</b> to display the button by specifying the <see cref="P:Microsoft.Office.Interop.Outlook._FormRegion.InternalName" /> property of the form region, if the form region is an adjoining or separate form region. Only the add-in that implements the form region can use <b>ShowFormRegion</b> to display the button.</para>
              <para />
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public int Top { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Top" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._Inspector.Top" />
      <MemberSignature Language="VB.NET" Value="Public Property Top As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Top { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8470)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(8470)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(8470)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="35e97-170">Gibt, oder legt einen <b>ganze Zahl</b> (<b>Int</b> in c#)-Wert zurück, der die Position (in Pixel) des oberen Rands des ein Inspektor-Fenster vom Rand des Bildschirms horizontale angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-170">Returns or sets an <b>Integer</b> (<b>int</b> in C#) value indicating the position (in pixels) of the top horizontal edge of an inspector window from the edge of the screen.</span>
          </span>
          <span data-ttu-id="35e97-171">Lese-/Schreibzugriff.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-171">Read/write.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public int Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Width" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._Inspector.Width" />
      <MemberSignature Language="VB.NET" Value="Public Property Width As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Width { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8471)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(8471)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(8471)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="35e97-172">Gibt, oder legt einen <b>ganze Zahl</b> (<b>Int</b> in c#)-Wert zurück, der die Breite (in Pixel) des angegebenen Objekts angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-172">Returns or sets an <b>Integer</b> (<b>int</b> in C#) value indicating the width (in pixels) of the specified object.</span>
          </span>
          <span data-ttu-id="35e97-173">Lese-/Schreibzugriff.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-173">Read/write.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowState">
      <MemberSignature Language="C#" Value="public Microsoft.Office.Interop.Outlook.OlWindowState WindowState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.Office.Interop.Outlook.OlWindowState WindowState" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._Inspector.WindowState" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowState As OlWindowState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::Office::Interop::Outlook::OlWindowState WindowState { Microsoft::Office::Interop::Outlook::OlWindowState get(); void set(Microsoft::Office::Interop::Outlook::OlWindowState value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8466)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(8466)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Runtime.InteropServices.DispId(8466)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Office.Interop.Outlook.OlWindowState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="35e97-174">Zurückgeben oder festlegen die Eigenschaft mit einer Konstante in der <see cref="T:Microsoft.Office.Interop.Outlook.OlWindowState" /> -Enumeration, die den Fensterstatus eines Explorer- oder Inspektor-Fensters angibt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-174">Returns or sets the property with a constant in the  <see cref="T:Microsoft.Office.Interop.Outlook.OlWindowState" /> enumeration specifying the window state of an explorer or inspector window.</span>
          </span>
          <span data-ttu-id="35e97-175">Lese-/Schreibzugriff.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-175">Read/write.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WordEditor">
      <MemberSignature Language="C#" Value="public object WordEditor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object WordEditor" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Interop.Outlook._Inspector.WordEditor" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WordEditor As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ WordEditor { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Office.Interop.Outlook</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(8463)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(8463)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="35e97-p118">Gibt das Microsoft Word-Dokumentobjektmodell der angezeigten Nachricht zurück. Schreibgeschützt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-p118">Returns the Microsoft Word Document Object Model of the  message being displayed. Read-only.</span>
          </span>
        </summary>
        <value>To be added.</value>
        <remarks>
          <span data-ttu-id="35e97-178">
            <para>Die <b>WordEditor</b> -Eigenschaft ist nur gültig Wenn <see cref="M:Microsoft.Office.Interop.Outlook._Inspector.IsWordMail" /> gibt <b>True</b> zurück, und die <see cref="P:Microsoft.Office.Interop.Outlook._Inspector.EditorType" /> ist <b>olEditorWord zurück</b>. Das zurückgegebene <b>WordDocument</b> -Objekt ermöglicht den Zugriff auf die meisten der Word-Objektmodell mit Ausnahme der folgenden Elemente: </para>
            <list type="bullet">
              <item>
                <para>
                  <b>Tables.Add</b>
                </para>
              </item>
              <item>
                <para>
                  <b>Range.ConvertToTable</b>
                </para>
              </item>
              <item>
                <para>
                  <b>InlineShapes.AddChart</b>
                </para>
              </item>
              <item>
                <para>
                  <b>Shapes.AddChart</b>
                </para>
              </item>
              <item>
                <para>
                  <b>Range.InsertXML</b>
                </para>
              </item>
              <item>
                <para>
                  <b>Selection.InsertXML sind</b>
                </para>
              </item>
              <item>
                <para>
                  <b>Range.ImportFragment</b>
                </para>
              </item>
            </list>
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="35e97-178">
              <para>The <b>WordEditor</b> property is only valid if <see cref="M:Microsoft.Office.Interop.Outlook._Inspector.IsWordMail" /> returns <b>True</b> and the <see cref="P:Microsoft.Office.Interop.Outlook._Inspector.EditorType" /> is <b>olEditorWord</b>. The returned <b>WordDocument</b> object provides access to most of the Word object model except for the following members: </para>
              <list type="bullet">
                <item>
                  <para>
                    <b>Tables.Add</b>
                  </para>
                </item>
                <item>
                  <para>
                    <b>Range.ConvertToTable</b>
                  </para>
                </item>
                <item>
                  <para>
                    <b>InlineShapes.AddChart</b>
                  </para>
                </item>
                <item>
                  <para>
                    <b>Shapes.AddChart</b>
                  </para>
                </item>
                <item>
                  <para>
                    <b>Range.InsertXML</b>
                  </para>
                </item>
                <item>
                  <para>
                    <b>Selection.InsertXML</b>
                  </para>
                </item>
                <item>
                  <para>
                    <b>Range.ImportFragment</b>
                  </para>
                </item>
              </list>
              <para />
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>